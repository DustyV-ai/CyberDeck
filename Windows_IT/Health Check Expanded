# Function to write colored output
function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    if ($args) {
        Write-Output $args
    }
    else {
        $input | Write-Output
    }
    $host.UI.RawUI.ForegroundColor = $fc
}

# Function to safely execute commands and handle errors
function Invoke-SafeCommand {
    param (
        [ScriptBlock]$Command,
        [string]$ErrorMessage
    )
    try {
        & $Command
    }
    catch {
        Write-ColorOutput Red "Error: $ErrorMessage"
        Write-ColorOutput Red "Details: $($_.Exception.Message)"
    }
}

# Initialize an array to store health check results
$script:healthChecks = @()

# 1. Check Event Logs for Errors
Write-Host "Checking Event Logs for Errors..." -ForegroundColor Cyan
Invoke-SafeCommand -Command {
    $recentErrors = Get-EventLog -LogName System -EntryType Error -Newest 50 -ErrorAction Stop | 
                    Group-Object -Property Source -NoElement | 
                    Sort-Object -Property Count -Descending
    foreach ($errorSource in $recentErrors) {
        if ($errorSource.Count -gt 5) {
            $latestError = Get-EventLog -LogName System -EntryType Error -Source $errorSource.Name -Newest 1
            $healthChecks += [PSCustomObject]@{
                Category = "Event Logs"
                Issue = "Frequent System Errors"
                Details = "$($errorSource.Count) recent errors from source: $($errorSource.Name)"
                LatestErrorMessage = $latestError.Message
                Recommendation = "Investigate the '$($errorSource.Name)' component. Check application logs, driver updates, or system stability."
            }
        }
    }
} -ErrorMessage "Failed to check Event Logs"

# 2. Check Drive Health (S.M.A.R.T status)
Write-Host "Checking Drive Health..." -ForegroundColor Cyan
Invoke-SafeCommand -Command {
    $physicalDisks = Get-PhysicalDisk | Where-Object MediaType -ne 'Unspecified'
    foreach ($disk in $physicalDisks) {
        if ($disk.HealthStatus -ne 'Healthy') {
            $healthChecks += [PSCustomObject]@{
                Category = "Drive Health"
                Issue = "Drive Health Issue"
                Details = "Drive $($disk.DeviceId) health status: $($disk.HealthStatus)"
                Recommendation = "Backup data immediately. Consider replacing the drive. Run 'chkdsk' for further diagnostics."
            }
        }
    }
} -ErrorMessage "Failed to check Drive Health"

# 3. Check Services
Write-Host "Checking Critical Services..." -ForegroundColor Cyan
$criticalServices = @{
    'wuauserv' = 'Windows Update'
    'WinDefend' = 'Windows Defender'
    'MpsSvc' = 'Windows Firewall'
    'wscsvc' = 'Security Center'
    'Dhcp' = 'DHCP Client'
    'Dnscache' = 'DNS Client'
}
foreach ($service in $criticalServices.Keys) {
    Invoke-SafeCommand -Command {
        $serviceStatus = Get-Service -Name $service -ErrorAction Stop
        if ($serviceStatus.Status -ne 'Running') {
            $healthChecks += [PSCustomObject]@{
                Category = "Services"
                Issue = "Critical Service Not Running"
                Details = "$($criticalServices[$service]) service ($service) is not running. Current status: $($serviceStatus.Status)"
                Recommendation = "Try starting the service manually using 'Start-Service $service'. If it fails, check the system logs for related errors."
            }
        }
    } -ErrorMessage "Failed to check service $($criticalServices[$service])"
}

# 4. Check Network Connectivity
Write-Host "Checking Network Connectivity..." -ForegroundColor Cyan
Invoke-SafeCommand -Command {
    $testConnection = Test-Connection -ComputerName www.google.com -Count 2 -Quiet
    if (-not $testConnection) {
        $healthChecks += [PSCustomObject]@{
            Category = "Network"
            Issue = "Network Connectivity Problem"
            Details = "Unable to reach www.google.com"
            Recommendation = "Check your network adapter settings, Wi-Fi or Ethernet connection. Verify DNS settings."
        }
    }
} -ErrorMessage "Failed to check network connectivity"

# 5. Check Windows Update Status
Write-Host "Checking Windows Update Status..." -ForegroundColor Cyan
Invoke-SafeCommand -Command {
    $updateSession = New-Object -ComObject Microsoft.Update.Session
    $updateSearcher = $updateSession.CreateUpdateSearcher()
    $pendingUpdates = $updateSearcher.Search("IsInstalled=0 and Type='Software'").Updates.Count
    if ($pendingUpdates -gt 0) {
        $healthChecks += [PSCustomObject]@{
            Category = "Windows Update"
            Issue = "Pending Windows Updates"
            Details = "$pendingUpdates updates are pending installation"
            Recommendation = "Run Windows Update to install pending updates. Ensure automatic updates are enabled."
        }
    }
} -ErrorMessage "Failed to check Windows Update status"

# 6. Check Disk Space
Write-Host "Checking Disk Space..." -ForegroundColor Cyan
Invoke-SafeCommand -Command {
    $disks = Get-CimInstance -ClassName Win32_LogicalDisk -Filter "DriveType=3"
    foreach ($disk in $disks) {
        $freeSpaceGB = [math]::Round($disk.FreeSpace / 1GB, 2)
        $totalSpaceGB = [math]::Round($disk.Size / 1GB, 2)
        $freeSpacePercent = [math]::Round(($freeSpaceGB / $totalSpaceGB) * 100, 2)
        if ($freeSpacePercent -lt 15) {
            $newCheck = [PSCustomObject]@{
                Category = "Disk Space"
                Issue = "Low Disk Space"
                Details = "Drive $($disk.DeviceID) has only $freeSpacePercent% ($freeSpaceGB GB) free space out of $totalSpaceGB GB"
                Recommendation = "Free up space by removing unnecessary files or consider upgrading disk capacity."
            }
            $script:healthChecks += $newCheck
        }
    }
} -ErrorMessage "Failed to check disk space"


# 7. Check CPU and Memory Usage
Write-Host "Checking CPU and Memory Usage..." -ForegroundColor Cyan
Invoke-SafeCommand -Command {
    $cpuUsage = (Get-WmiObject Win32_Processor | Measure-Object -Property LoadPercentage -Average).Average
    $memoryUsage = (Get-WmiObject Win32_OperatingSystem | Select-Object @{Name = "MemoryUsage"; Expression = {[math]::Round((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory) / $_.TotalVisibleMemorySize) * 100, 2)}}).MemoryUsage

    if ($cpuUsage -gt 90) {
        $healthChecks += [PSCustomObject]@{
            Category = "System Resources"
            Issue = "High CPU Usage"
            Details = "CPU usage is at $cpuUsage%"
            Recommendation = "Check Task Manager for processes consuming high CPU. Consider upgrading CPU if this is frequent."
        }
    }

    if ($memoryUsage -gt 90) {
        $healthChecks += [PSCustomObject]@{
            Category = "System Resources"
            Issue = "High Memory Usage"
            Details = "Memory usage is at $memoryUsage%"
            Recommendation = "Check Task Manager for processes consuming high memory. Consider adding more RAM if this is frequent."
        }
    }
} -ErrorMessage "Failed to check CPU and Memory usage"

# 8. Check for Recent System Crashes
Write-Host "Checking for Recent System Crashes..." -ForegroundColor Cyan
Invoke-SafeCommand -Command {
    $crashLogs = Get-WinEvent -FilterHashtable @{LogName='System'; ID=1001} -MaxEvents 5 -ErrorAction SilentlyContinue
    if ($crashLogs) {
        $latestCrash = $crashLogs[0]
        $healthChecks += [PSCustomObject]@{
            Category = "System Stability"
            Issue = "Recent System Crash Detected"
            Details = "Latest crash occurred on $($latestCrash.TimeCreated)"
            Recommendation = "Check for driver updates, run memory diagnostics, and monitor system temperature."
        }
    }
} -ErrorMessage "Failed to check for system crashes"

# 10. Check for Outdated Drivers
Write-Host "Checking for Outdated Drivers..." -ForegroundColor Cyan
Invoke-SafeCommand -Command {
    $outdatedDrivers = Get-WmiObject Win32_PnPSignedDriver | 
                       Where-Object { $_.DriverDate.Substring(0, 8) -lt (Get-Date (Get-Date).AddYears(-2) -Format yyyyMMdd) } |
                       Select-Object -First 5
    if ($outdatedDrivers) {
        $healthChecks += [PSCustomObject]@{
            Category = "Drivers"
            Issue = "Outdated Drivers Detected"
            Details = "Found $($outdatedDrivers.Count) drivers older than 2 years"
            Recommendation = "Update these drivers through Windows Update or the manufacturer's website."
        }
    }
} -ErrorMessage "Failed to check for outdated drivers"

# 11. Check for Unauthorized System Changes
Write-Host "Checking for Unauthorized System Changes..." -ForegroundColor Cyan
Invoke-SafeCommand -Command {
    $recentInstalls = Get-WmiObject Win32_Product | 
                      Where-Object { $_.InstallDate -gt (Get-Date).AddDays(-7) }
    if ($recentInstalls) {
        $healthChecks += [PSCustomObject]@{
            Category = "System Changes"
            Issue = "Recent Software Installations"
            Details = "Found $($recentInstalls.Count) software installations in the last 7 days"
            Recommendation = "Review these recent installations to ensure they are authorized."
        }
    }
} -ErrorMessage "Failed to check for recent software installations"

# 12. Check for Pending Reboots
Write-Host "Checking for Pending Reboots..." -ForegroundColor Cyan
Invoke-SafeCommand -Command {
    $pendingReboot = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager" -Name PendingFileRenameOperations -ErrorAction SilentlyContinue
    if ($pendingReboot) {
        $healthChecks += [PSCustomObject]@{
            Category = "System State"
            Issue = "Pending Reboot Detected"
            Details = "System has pending changes that require a reboot"
            Recommendation = "Save your work and restart the computer to apply pending changes."
        }
    }
} -ErrorMessage "Failed to check for pending reboots"

# Output Results
Write-Host "`nSystem Health Check Results:" -ForegroundColor Yellow
if ($healthChecks.Count -eq 0) {
    Write-ColorOutput Green "No issues detected. System appears to be healthy."
} else {
    Write-ColorOutput Red "Found $($healthChecks.Count) potential issues:"
    $healthChecks | Format-Table -AutoSize -Wrap
}

# Save results to a variable
$healthCheckResults = $healthChecks

# Optionally, you can export the results to a CSV file
$csvPath = "$env:USERPROFILE\Desktop\SystemHealthCheckResults.csv"
$healthCheckResults | Export-Csv -Path $csvPath -NoTypeInformation
Write-Host "`nResults exported to CSV: $csvPath" -ForegroundColor Green

# You can now use $healthCheckResults variable to further process or analyze the data

