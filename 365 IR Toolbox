# Check and install required modules
$requiredModules = @(
    "ExchangeOnlineManagement",
    "Microsoft.Graph.Authentication",
    "Microsoft.Graph.Identity.SignIns",
    "Microsoft.Graph.Users"
)

foreach ($module in $requiredModules) {
    if (!(Get-Module -ListAvailable -Name $module)) {
        Write-Host "Module $module is not installed. Attempting to install..."
        try {
            Install-Module -Name $module -Force -AllowClobber -Scope CurrentUser
            Write-Host "Module $module installed successfully."
        }
        catch {
            Write-Host "Failed to install module $module. Please install it manually using the following command:"
            Write-Host "Install-Module -Name $module -Force -AllowClobber -Scope CurrentUser"
            exit
        }
    }
}

# Import required modules
Import-Module ExchangeOnlineManagement
Import-Module Microsoft.Graph.Authentication
Import-Module Microsoft.Graph.Identity.SignIns
Import-Module Microsoft.Graph.Users

# Add System.Web assembly for password generation
Add-Type -AssemblyName System.Web

# Configuration
$script:LogFile = "ComplianceSearchLog.txt"
$script:SearchQueryTemplate = "from:{0}"
$script:MaxRetries = 3
$script:RetryDelay = 5

function Write-Log {
    param(
        [string]$Message,
        [ValidateSet('Info', 'Warning', 'Error')]
        [string]$Level = 'Info'
    )
    $logMessage = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - [$Level] $Message"
    Add-Content -Path $script:LogFile -Value $logMessage
    switch ($Level) {
        'Info' { Write-Host $logMessage -ForegroundColor Green }
        'Warning' { Write-Host $logMessage -ForegroundColor Yellow }
        'Error' { Write-Host $logMessage -ForegroundColor Red }
    }
}

function Test-ExchangeConnection {
    $connectedToSCC = Get-PSSession | Where-Object {$_.ComputerName -eq "ps.compliance.protection.outlook.com" -and $_.State -eq "Opened"}
    if (-not $connectedToSCC) {
        Write-Log "Not connected to Security & Compliance Center. Attempting to connect..." -Level Warning
        try {
            Connect-IPPSSession -ErrorAction Stop
            Write-Log "Successfully connected to Security & Compliance Center." -Level Info
        }
        catch {
            Write-Log "Failed to connect to Security & Compliance Center: $_" -Level Error
            return $false
        }
    }
    return $true
}

function New-UniqueSearchName {
    param([string]$BaseName)
    $searchName = $BaseName
    $counter = 1
    while (Get-ComplianceSearch -Identity $searchName -ErrorAction SilentlyContinue) {
        $searchName = "${BaseName}_$counter"
        $counter++
    }
    return $searchName
}

function Start-ComplianceSearch {
    param(
        [Parameter(Mandatory=$true)]
        [ValidatePattern("^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$")]
        [string]$EmailAddress,
        
        [Parameter(Mandatory=$false)]
        [int]$TimeoutMinutes = 30
    )

    $baseSearchName = "Search_$($EmailAddress.Replace('@','_'))"
    
    # Prompt for email subject
    $emailSubject = Read-Host "Enter the email subject (press Enter to skip)"

    # Modify search query based on whether a subject was provided
    if ([string]::IsNullOrWhiteSpace($emailSubject)) {
        $searchQuery = $script:SearchQueryTemplate -f $EmailAddress
    } else {
        $searchQuery = "($($script:SearchQueryTemplate -f $EmailAddress)) AND (Subject:`"$emailSubject`")"
    }

    # Confirm before proceeding
    $confirmSearch = Read-Host "Ready to search for emails from $EmailAddress $(if(-not [string]::IsNullOrWhiteSpace($emailSubject)){"with subject containing '$emailSubject'"})? (Y/N)"
    if ($confirmSearch -ne "Y") {
        Write-Log "Search cancelled by user." -Level Info
        return
    }

    try {
        if (-not (Test-ExchangeConnection)) {
            throw "Unable to establish connection to Security & Compliance Center."
        }

        # Create a unique search name
        $searchName = $null
        $counter = 0
        do {
            $searchName = if ($counter -eq 0) { $baseSearchName } else { "${baseSearchName}_$counter" }
            $counter++
            
            $existingSearch = Get-ComplianceSearch -Identity $searchName -ErrorAction SilentlyContinue
        } while ($existingSearch -ne $null)

        Write-Log "Creating compliance search: $searchName" -Level Info

        # Attempt to create the search with proper parameters
        $retryCount = 0
        $maxRetries = $script:MaxRetries
        $success = $false
        
        do {
            try {
                # Note the correct parameters: using quotes around "All" and proper parameter syntax
                $search = New-ComplianceSearch -Name $searchName -AllMailboxes $true -ContentMatchQuery $searchQuery -ErrorAction Stop
                $success = $true
                Write-Log "Successfully created compliance search" -Level Info
                break
            }
            catch {
                $retryCount++
                # Check for specific errors
                if ($_.ToString() -like "*already exists*") {
                    Write-Log "Search name already exists. Trying with a different name..." -Level Warning
                    $searchName = "${baseSearchName}_$(Get-Random -Minimum 1000 -Maximum 9999)"
                    continue
                }
                
                if ($retryCount -ge $maxRetries) {
                    throw
                }
                
                Write-Log "Attempt $retryCount failed: $_. Retrying in $script:RetryDelay seconds..." -Level Warning
                Start-Sleep -Seconds $script:RetryDelay
            }
        } while ($true)

        if (-not $success) {
            throw "Failed to create compliance search after $maxRetries attempts."
        }

        Write-Log "Starting compliance search: $searchName" -Level Info
        Start-ComplianceSearch -Identity $searchName -ErrorAction Stop

        Write-Log "Waiting for search to complete..." -Level Info
        $progressParams = @{
            Activity = "Compliance Search"
            Status = "Searching..."
            PercentComplete = 0
        }
        
        $startTime = Get-Date
        $timeoutTime = $startTime.AddMinutes($TimeoutMinutes)
        
        do {
            Start-Sleep -Seconds 5
            $searchStatus = Get-ComplianceSearch -Identity $searchName -ErrorAction Stop
            
            # Handle null percentage during initial search phases
            $percentComplete = 0
            if ($null -ne $searchStatus.PercentComplete) {
                $percentComplete = [math]::Min($searchStatus.PercentComplete, 100)
            }
            
            $progressParams.PercentComplete = $percentComplete
            $progressParams.Status = "Searching... $percentComplete% complete"
            
            Write-Progress @progressParams
            
            # Check for timeout
            if ((Get-Date) -gt $timeoutTime) {
                Write-Log "Search timed out after $TimeoutMinutes minutes." -Level Warning
                Write-Host "The search is still running but this command has timed out. You can check the status later with:" -ForegroundColor Yellow
                Write-Host "Get-ComplianceSearch -Identity `"$searchName`"" -ForegroundColor Cyan
                return
            }
            
        } while ($searchStatus.Status -ne "Completed")

        Write-Progress -Activity "Compliance Search" -Completed

        $results = Get-ComplianceSearch -Identity $searchName -ErrorAction Stop
        if ($results) {
            Write-Log "Search completed. Found $($results.Items) items." -Level Info
            
            if ($results.Items -gt 0) {
                # Display more details about the results
                Write-Host "Search Results Summary:" -ForegroundColor Green
                Write-Host "-------------------------" -ForegroundColor Green
                Write-Host "Search Name: $($results.Name)" -ForegroundColor Green
                Write-Host "Query: $($results.ContentMatchQuery)" -ForegroundColor Green
                Write-Host "Items Found: $($results.Items)" -ForegroundColor Green
                Write-Host "Size: $($results.Size)" -ForegroundColor Green
                Write-Host "Status: $($results.Status)" -ForegroundColor Green
                Write-Host "Locations: $($results.SearchStatistics)" -ForegroundColor Green
                
                # Offer to export detailed results
                $exportChoice = Read-Host "Do you want to export detailed results to a CSV file? (Y/N)"
                if ($exportChoice -eq "Y") {
                    $exportPath = Join-Path -Path $env:USERPROFILE -ChildPath "Desktop\ComplianceSearchResults_$searchName.csv"
                    
                    # Use the Search-ComplianceSearch cmdlet to get detailed results
                    # Note: This cmdlet might not be available in all environments
                    try {
                        $detailedResults = New-ComplianceSearchAction -SearchName $searchName -Preview -ErrorAction Stop
                        Start-Sleep -Seconds 5
                        $previewResults = Get-ComplianceSearchAction -Identity "$searchName`_Preview" -ErrorAction Stop
                        $previewResults | Export-Csv -Path $exportPath -NoTypeInformation
                        Write-Host "Results exported to: $exportPath" -ForegroundColor Green
                    }
                    catch {
                        Write-Log "Failed to export detailed results: $_" -Level Error
                        Write-Host "Unable to export detailed results. You can view them in the Security & Compliance Center." -ForegroundColor Yellow
                    }
                }
                
                $purgeConfirm = Read-Host "Do you want to purge these items? This is a DESTRUCTIVE action. Type 'CONFIRM PURGE' to proceed"
                if ($purgeConfirm -eq "CONFIRM PURGE") {
                    $purgeAction = New-ComplianceSearchAction -SearchName $searchName -Purge -PurgeType HardDelete -Confirm:$false -ErrorAction Stop
                    if ($purgeAction) {
                        Write-Log "Purge action initiated with ID: $($purgeAction.Identity)" -Level Info
                        Write-Host "Purge action initiated. You can check the status with:" -ForegroundColor Yellow
                        Write-Host "Get-ComplianceSearchAction -Identity `"$($purgeAction.Identity)`"" -ForegroundColor Cyan
                    } else {
                        Write-Log "Failed to initiate purge action." -Level Error
                    }
                } else {
                    Write-Log "Purge action cancelled or confirmation text didn't match." -Level Info
                }
            }
        } else {
            Write-Log "No results found or unable to retrieve results." -Level Warning
        }
    }
    catch {
        Write-Log "Error performing compliance search: $_" -Level Error
        Write-Log "Stack Trace: $($_.ScriptStackTrace)" -Level Error
    }
}

function Remove-OldSearches {
    param([int]$DaysOld = 30)
    $cutoffDate = (Get-Date).AddDays(-$DaysOld)
    $oldSearches = Get-ComplianceSearch | Where-Object { $_.CreationTime -lt $cutoffDate }  # Use CreationTime instead of CreatedDate
    foreach ($search in $oldSearches) {
        Write-Log "Removing old search: $($search.Name)" -Level Info
        Remove-ComplianceSearch -Identity $search.Name -Confirm:$false  # Use -Identity instead of -Name
    }
}


function Block-Domain {
    param(
        [Parameter(Mandatory=$true)]
        [ValidatePattern("^(?!:\/\/)(?=.{1,255}$)((.{1,63}\.){1,127}(?![0-9]*$)[a-z0-9-]+\.?)$")]
        [string]$DomainName
    )
    try {
        $policyName = "BlockedDomains"
        $existingPolicy = Get-HostedContentFilterPolicy -Identity $policyName -ErrorAction SilentlyContinue

        if ($existingPolicy) {
            if ($existingPolicy.BlockedSenderDomains -contains $DomainName) {
                Write-Log "Domain $DomainName is already blocked." -Level Warning
                return
            }

            $updatedBlockedDomains = $existingPolicy.BlockedSenderDomains + $DomainName
            Set-HostedContentFilterPolicy -Identity $policyName -BlockedSenderDomains $updatedBlockedDomains
            Write-Log "Domain $DomainName has been added to the existing blocked domains list." -Level Info
        } else {
            New-HostedContentFilterPolicy -Name $policyName -BlockedSenderDomains $DomainName
            Write-Log "New policy created with domain $DomainName blocked." -Level Info
        }

        $existingRules = Get-HostedContentFilterRule | Where-Object {$_.HostedContentFilterPolicy -eq $policyName}

        if ($existingRules) {
            Write-Log "Existing rule(s) found for the blocked domains policy. No changes made to rules." -Level Info
        } else {
            New-HostedContentFilterRule -Name "Default Blocked Domains Rule" -HostedContentFilterPolicy $policyName -RecipientDomainIs ((Get-AcceptedDomain).DomainName)
            Write-Log "Created new rule associated with the blocked domains policy." -Level Info
        }
    }
    catch {
        Write-Log "Error blocking domain: $_" -Level Error
    }
}

function Search-UserSignInsForIP {
    param(
        [Parameter(Mandatory=$true)]
        [string]$IPAddress
    )

    # Function to validate IP address (both IPv4 and IPv6)
    function Test-IPAddress {
        param ([string]$IP)
        $IPv4Regex = "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        $IPv6Regex = "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$"
        return ($IP -match $IPv4Regex) -or ($IP -match $IPv6Regex)
    }

    if (-not (Test-IPAddress $IPAddress)) {
        Write-Log "Invalid IP address format. Please enter a valid IPv4 or IPv6 address." -Level Error
        return
    }

    $maxRetries = 3
    $retryDelay = 5

    for ($i = 0; $i -lt $maxRetries; $i++) {
        try {
            # Connect to Microsoft Graph if not already connected
            if (-not (Get-MgContext)) {
                Write-Log "Connecting to Microsoft Graph..." -Level Info
                Connect-MgGraph -Scopes "AuditLog.Read.All" -ErrorAction Stop
            }

            Write-Log "Searching for sign-ins from IP address: $IPAddress over the past week (Attempt $($i+1))" -Level Info

            # Calculate date one week ago
            $oneWeekAgo = (Get-Date).AddDays(-7).ToString("yyyy-MM-ddTHH:mm:ssZ")

            $uri = "https://graph.microsoft.com/v1.0/auditLogs/signIns?`$filter=ipAddress eq '$IPAddress' and createdDateTime ge $oneWeekAgo&`$top=100&`$orderby=createdDateTime desc"
            $signIns = Invoke-MgGraphRequest -Uri $uri -Method Get -ErrorAction Stop

            if ($signIns.value) {
                $signInCount = $signIns.value.Count
                Write-Log "Found $signInCount sign-in(s) from IP address $IPAddress in the past week:" -Level Info
                foreach ($signIn in $signIns.value) {
                    $logInfo = @"
User: $($signIn.userPrincipalName)
Time: $($signIn.createdDateTime)
Status: $($signIn.status.errorCode)
Application: $($signIn.appDisplayName)
Client App: $($signIn.clientAppUsed)
Device: $($signIn.deviceDetail.displayName)
Location: $($signIn.location.city), $($signIn.location.countryOrRegion)
Risk Level: $($signIn.riskLevel)
"@
                    Write-Log $logInfo -Level Info
                    Write-Log "------------------------" -Level Info
                }
            } else {
                Write-Log "No sign-ins found from IP address $IPAddress in the past week" -Level Warning
            }

            # If we reach here, the operation was successful, so we break out of the retry loop
            break
        }
        catch {
            Write-Log "Error searching for sign-ins (Attempt $($i+1)): $_" -Level Error
            Write-Log "Stack Trace: $($_.ScriptStackTrace)" -Level Error

            if ($i -lt $maxRetries - 1) {
                Write-Log "Retrying in $retryDelay seconds..." -Level Info
                Start-Sleep -Seconds $retryDelay
            } else {
                Write-Log "Max retries reached. Operation failed." -Level Error
            }
        }
    }
}




function Revoke-UserSessionTokens {
    param(
        [Parameter(Mandatory=$true)]
        [ValidatePattern("^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$")]
        [string]$UserPrincipalName
    )

    try {
        # Connect to Microsoft Graph if not already connected
        if (-not (Get-MgContext)) {
            Connect-MgGraph -Scopes "User.ReadWrite.All" -ErrorAction Stop
        }

        Write-Log "Revoking session tokens for user: $UserPrincipalName" -Level Info

        # Get the user's Object ID
        $user = Get-MgUser -UserId $UserPrincipalName -ErrorAction Stop
        
        # Revoke all refresh tokens for the user
        $revokeTokenUri = "https://graph.microsoft.com/v1.0/users/$($user.Id)/revokeSignInSessions"
        Invoke-MgGraphRequest -Method POST -Uri $revokeTokenUri -ErrorAction Stop

        Write-Log "Successfully revoked session tokens for user: $UserPrincipalName" -Level Info
    }
    catch {
        Write-Log "Error revoking session tokens: $_" -Level Error
        Write-Log "Stack Trace: $($_.ScriptStackTrace)" -Level Error
    }
}

function Reset-UserPassword {
    param(
        [Parameter(Mandatory=$true)]
        [ValidatePattern("^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$")]
        [string]$UserPrincipalName
    )

    try {
        # Connect to Microsoft Graph if not already connected
        if (-not (Get-MgContext)) {
            Connect-MgGraph -Scopes "User.ReadWrite.All" -ErrorAction Stop
        }

        Write-Log "Resetting password for user: $UserPrincipalName" -Level Info

        $passwordProfile = @{
            ForceChangePasswordNextSignIn = $true
            Password = [System.Web.Security.Membership]::GeneratePassword(16,3)
        }

        Update-MgUser -UserId $UserPrincipalName -PasswordProfile $passwordProfile -ErrorAction Stop

        Write-Log "Successfully reset password for user: $UserPrincipalName" -Level Info
        Write-Log "Temporary password: $($passwordProfile.Password)" -Level Info
        Write-Host "Temporary password: $($passwordProfile.Password)" -ForegroundColor Yellow
    }
    catch {
        Write-Log "Error resetting user password: $_" -Level Error
        Write-Log "Stack Trace: $($_.ScriptStackTrace)" -Level Error
    }
}

function Get-UserInboxRules {
    param(
        [Parameter(Mandatory=$true)]
        [ValidatePattern("^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$")]
        [string]$UserPrincipalName
    )

    try {
        Write-Log "Retrieving inbox rules for user: $UserPrincipalName" -Level Info

        # Connect to Exchange Online if not already connected
        if (-not (Get-PSSession | Where-Object {$_.ConfigurationName -eq "Microsoft.Exchange"})) {
            Connect-ExchangeOnline -ErrorAction Stop
        }

        $rules = Get-InboxRule -Mailbox $UserPrincipalName -ErrorAction Stop

        if ($rules) {
            Write-Log "Found $($rules.Count) inbox rule(s) for $UserPrincipalName" -Level Info
            foreach ($rule in $rules) {
                Write-Log "Rule ID: $($rule.Identity) | Name: $($rule.Name) | Enabled: $($rule.Enabled)" -Level Info
            }
        } else {
            Write-Log "No inbox rules found for $UserPrincipalName" -Level Warning
        }
    }
    catch {
        Write-Log "Error retrieving inbox rules: $_" -Level Error
        Write-Log "Stack Trace: $($_.ScriptStackTrace)" -Level Error
    }
}

function Remove-UserInboxRule {
    param(
        [Parameter(Mandatory=$true)]
        [ValidatePattern("^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$")]
        [string]$UserPrincipalName,

        [Parameter(Mandatory=$true)]
        [string]$RuleId
    )

    try {
        Write-Log "Attempting to remove inbox rule $RuleId for user: $UserPrincipalName" -Level Info

        # Connect to Exchange Online if not already connected
        if (-not (Get-PSSession | Where-Object {$_.ConfigurationName -eq "Microsoft.Exchange"})) {
            Connect-ExchangeOnline -ErrorAction Stop
        }

        # Get all rules for the mailbox
        $rules = Get-InboxRule -Mailbox $UserPrincipalName -ErrorAction Stop

        # Find the specific rule
        $ruleToRemove = $rules | Where-Object { $_.Identity -eq $RuleId }

        if ($ruleToRemove) {
            # Remove the rule
            $ruleToRemove | Remove-InboxRule -Confirm:$false -ErrorAction Stop
            Write-Log "Successfully removed inbox rule $RuleId for $UserPrincipalName" -Level Info
        } else {
            Write-Log "Inbox rule $RuleId not found for $UserPrincipalName" -Level Warning
        }
    }
    catch {
        Write-Log "Error removing inbox rule: $_" -Level Error
        Write-Log "Stack Trace: $($_.ScriptStackTrace)" -Level Error
    }
}

function Get-MessageTraceDetails {
    # Check if ExchangeOnline module is installed and connected
    if (!(Get-Module -ListAvailable -Name ExchangeOnlineManagement)) {
        Write-Host "ExchangeOnline module is not installed. Installing now..."
        Install-Module -Name ExchangeOnlineManagement -Force -AllowClobber
    }

    if (!(Get-PSSession | Where-Object {$_.ConfigurationName -eq "Microsoft.Exchange"})) {
        Write-Host "Connecting to Exchange Online..."
        Connect-ExchangeOnline
    }

    # Get user input
    $emailAddress = Read-Host "Enter the email address for the message trace"
    $direction = Read-Host "Is this for the sender or receiver? (S/R)"

    # Validate input
    if (-not ($direction -eq 'S' -or $direction -eq 'R')) {
        Write-Host "Invalid input. Please enter 'S' for sender or 'R' for receiver."
        return
    }

    # Set up parameters for message trace
$params = @{
    StartDate = (Get-Date).AddDays(-10)  # Last 10 days
    EndDate = Get-Date
    PageSize = 5000
}

    if ($direction -eq 'S') {
        $params.Add("SenderAddress", $emailAddress)
    } else {
        $params.Add("RecipientAddress", $emailAddress)
    }

    # Run message trace
    Write-Host "Running message trace..."
    $results = Get-MessageTrace @params

    # Display results
    if ($results) {
        Write-Host "Message trace results:"
        $results | Format-Table -AutoSize -Property Received, SenderAddress, RecipientAddress, Subject, Status, ToIP, FromIP, Size, MessageId
        
        # Offer to export results to CSV
        $exportChoice = Read-Host "Do you want to export these results to a CSV file? (Y/N)"
        if ($exportChoice -eq 'Y') {
            $exportPath = Join-Path -Path $env:USERPROFILE -ChildPath "Desktop\MessageTraceResults.csv"
            $results | Export-Csv -Path $exportPath -NoTypeInformation
            Write-Host "Results exported to: $exportPath"
        }
    } else {
        Write-Host "No messages found matching the criteria."
    }
}

function Get-UniqueUserLogins {
    param(
        [Parameter(Mandatory=$true)]
        [string]$UserPrincipalName
    )

    Write-Host "Starting unique user logins search for $UserPrincipalName"

    # Check if Microsoft.Graph module is installed and connected
    if (!(Get-Module -ListAvailable -Name Microsoft.Graph)) {
        Write-Host "Microsoft.Graph module is not installed. Installing now..."
        try {
            Install-Module -Name Microsoft.Graph -Force -AllowClobber
            Write-Host "Microsoft.Graph module installed successfully"
        } catch {
            Write-Host "Failed to install Microsoft.Graph module: $_"
            return
        }
    }

    if (!(Get-MgContext)) {
        Write-Host "Connecting to Microsoft Graph..."
        try {
            Connect-MgGraph -Scopes "AuditLog.Read.All", "Directory.Read.All"
            Write-Host "Connected to Microsoft Graph successfully"
        } catch {
            Write-Host "Failed to connect to Microsoft Graph: $_"
            return
        }
    }

    # Set the time range for the past 7 days
    $startDate = (Get-Date).AddDays(-7).ToString("yyyy-MM-dd")
    $endDate = (Get-Date).ToString("yyyy-MM-dd")

    Write-Host "Retrieving last 500 sign-in logs for $UserPrincipalName from $startDate to $endDate"

    # Get sign-in logs for the user
    try {
        $signIns = Get-MgAuditLogSignIn -Filter "userPrincipalName eq '$UserPrincipalName'" -Top 500 `
            -Property "createdDateTime,ipAddress,deviceDetail,isInteractive,userPrincipalName,location" `
            | Where-Object { $_.CreatedDateTime -ge $startDate -and $_.CreatedDateTime -le $endDate }

        Write-Host "Retrieved $($signIns.Count) sign-in logs"
    } catch {
        Write-Host "Error retrieving sign-in logs: $_"
        return
    }

    if ($signIns) {
        Write-Host "Processing sign-in logs..."

        # Group by IP address and get unique entries
        $uniqueLogins = $signIns | Group-Object -Property IpAddress | ForEach-Object {
            $firstSignIn = $_.Group[0]
            [PSCustomObject]@{
                IPAddress = $firstSignIn.IpAddress
                DeviceJoinType = if ($firstSignIn.DeviceDetail.IsManaged) { "Azure AD Joined" } elseif ($firstSignIn.DeviceDetail.IsCompliant) { "Azure AD Registered" } else { "Not Joined/Registered" }
                LastLoginTime = ($_.Group | Sort-Object CreatedDateTime -Descending)[0].CreatedDateTime
                LoginCount = $_.Count
                Country = $firstSignIn.Location.CountryOrRegion
                State = $firstSignIn.Location.State
                City = $firstSignIn.Location.City
            }
        }

        # Display results
        Write-Host "Unique logins for $UserPrincipalName in the past 7 days:"
        $uniqueLogins | Format-Table -AutoSize -Property IPAddress, DeviceJoinType, LastLoginTime, LoginCount, Country, State, City

        # Offer to export results to CSV
        $exportChoice = Read-Host "Do you want to export these results to a CSV file? (Y/N)"
        if ($exportChoice -eq 'Y') {
            $exportPath = Join-Path -Path $env:USERPROFILE -ChildPath "Desktop\UniqueUserLogins.csv"
            $uniqueLogins | Export-Csv -Path $exportPath -NoTypeInformation
            Write-Host "Results exported to: $exportPath"
        }
    } else {
        Write-Host "No sign-ins found for $UserPrincipalName in the past 7 days."
    }

    Write-Host "Unique user logins search completed for $UserPrincipalName"
}

# Main menu
do {
    Write-Host "`n1. Perform Compliance Search"
    Write-Host "2. Clean Up Old Searches"
    Write-Host "3. Block Domain"
    Write-Host "4. Search User Sign-Ins for IP"
    Write-Host "5. Revoke User Session Tokens"
    Write-Host "6. Reset User Password"
    Write-Host "7. List User Inbox Rules"
    Write-Host "8. Remove User Inbox Rule"
    Write-Host "9. Run Message Trace"
    Write-Host "10. Get Unique User Logins"
    Write-Host "11. Exit"
    $choice = Read-Host "Enter your choice (1-11)"

    switch ($choice) {
        "1" {
            $emailAddress = Read-Host "Enter the email address for compliance search"
            Start-ComplianceSearch -EmailAddress $emailAddress
        }
        "2" {
            $days = Read-Host "Enter the number of days old (default 30)"
            if ([string]::IsNullOrWhiteSpace($days)) { $days = 30 }
            Remove-OldSearches -DaysOld $days
        }
        "3" {
            $domainName = Read-Host "Enter the domain name to block"
            Block-Domain -DomainName $domainName
        }
        "4" {
            $ipAddress = Read-Host "Enter the IP address to search for"
            Search-UserSignInsForIP -IPAddress $ipAddress
        }
        "5" {
            $userPrincipalName = Read-Host "Enter the user's UPN or email address"
            Revoke-UserSessionTokens -UserPrincipalName $userPrincipalName
        }
        "6" {
            $userPrincipalName = Read-Host "Enter the user's UPN or email address"
            Reset-UserPassword -UserPrincipalName $userPrincipalName
        }
        "7" {
            $userPrincipalName = Read-Host "Enter the user's UPN or email address"
            Get-UserInboxRules -UserPrincipalName $userPrincipalName
        }
        "8" {
            $userPrincipalName = Read-Host "Enter the user's UPN or email address"
            $ruleId = Read-Host "Enter the ID of the inbox rule to remove"
            Remove-UserInboxRule -UserPrincipalName $userPrincipalName -RuleId $ruleId
        }
        "9" {
            Get-MessageTraceDetails
        }
        "10" {
            $userPrincipalName = Read-Host "Enter the user's UPN or email address"
            Get-UniqueUserLogins -UserPrincipalName $userPrincipalName
        }
        "11" {
            Write-Host "Exiting..."
            break
        }
        default {
            Write-Log "Invalid choice. Please try again." -Level Warning
        }
    }
} while ($choice -ne "11")

# Disconnect sessions
try {
    Disconnect-ExchangeOnline -Confirm:$false
    Disconnect-MgGraph -ErrorAction SilentlyContinue
    Write-Log "Successfully disconnected from Exchange Online and Microsoft Graph." -Level Info
}
catch {
    Write-Log "Error disconnecting from sessions: $_" -Level Error
}

Write-Host "Script execution completed. Check the log file for details: $script:LogFile"
